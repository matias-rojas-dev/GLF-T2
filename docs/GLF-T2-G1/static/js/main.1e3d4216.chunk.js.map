{"version":3,"sources":["components/Header.js","utils/makeStyle.js","components/SimpleSelect.js","components/InputDialog.js","components/MultiSelect.js","lib/error.js","lib/automata/utils.js","lib/automata/state.js","lib/automata/nfa.js","lib/automata/dfa.js","lib/automata/automata.js","components/Transitions.js","components/Content.js","components/Tabs.js","components/RadioButtonsGroup.js","components/Optional.js","index.js"],"names":["Header","AppBar","position","Toolbar","className","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","display","justifyContent","selectEmpty","marginTop","container","root","width","root_tabs","backgroundColor","palette","background","paper","container_transitions","maxHeight","maxWidth","table_transitions","root_cajaTexto","formControl_multiSelect","formControl_simpleSelect","Date","SimpleSelect","options","value","onChange","helperText","nullable","children","classes","FormControl","variant","style","InputLabel","id","Select","labelId","label","disabled","length","MenuItem","map","option","InputDialog","values","join","isError","helpers","useState","open","setOpen","setValue","handleClose","TextField","InputProps","readOnly","pointerEvents","IconButton","color","onClick","Dialog","onClose","styles","aria-labelledby","DialogTitle","DialogContent","DialogContentText","fullWidth","autoFocus","error","event","target","noError","DialogActions","Button","MultiSelect","multiple","index","Error","msg","context","this","isNFA","output","Array","getLinks","transitions","links","input","outputs","reading","state","push","from","to","text","common","Map","key","has","get","set","joined","split","sort","joinCommonEnds","getNodesData","allStates","finalStates","initialState","includes","isInitial","states","initial","isFinal","final","replace","replaced","replacement","merge","array","splice","indexOf","mergeOrReplace","pull","all","delete","normalize","prefix","suffix","iteration","other","intersection","Epsilon","Object","freeze","symbol","NFA","alphabet","isSubset","subset","every","e","undefined","isValidOutput","isValidReading","validOutputs","validTransitions","uniq","defineProperties","bind","stateCallbacks","flatten","normalized","clone","count","size","intermediaries","range","n","chain","i","setTransition","cloneDeep","lhs","rhs","DFA","validReadings","reduce","accumulator","equivalences","stack","at","some","findIndex","equivalence","isEqual","minBy","minimal","mergeable","difference","current","pop","filter","keys","complement","nfa","union","epsilon","next","includingEpsilon","reduceUnion","reduced","add","compact","addSink","sink","Type","Transitions","type","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","char","align","TableBody","FDLayout","go","call","inherit","prototype","makeNetwork","coll","net","vertexes","each","vertex","node","isFixed","isSelected","Content","data","linksData","isDirected","initDiagram","$","make","diagram","autoScale","Uniform","layout","model","linkKeyProperty","lay","parseFloat","ConstantSpacing","nodeTemplate","name","fill","strokeWidth","portId","editable","font","makeTwoWay","linkTemplate","curve","Bezier","stroke","toArrow","divClassName","linkDataArray","nodeDataArray","checkNull","forceDFA","automaton","status","statuses","lhsType","rhsType","Tabs","toggleState","setToggleState","renderAutomaton","toggleTab","concatenation","RadioButtonsGroup","ButtonGroup","types","logs","Debugout","today","info","defaults","secondDefaults","Optional","checked","setChecked","specialSequences","setSpecialSequences","valid","reason","setStatus","setType","setAllStates","setInitialState","setFinalStates","setAlphabet","setTransitions","secondSpecialSequences","setSecondSpecialSequences","secondStatus","setSecondStatus","secondType","setSecondType","secondAllStates","setSecondAllStates","secondInitialState","setSecondInitialState","secondFinalStates","setSecondFinalStates","secondAlphabet","setSecondAlphabet","secondTransitions","setSecondTransitions","useMemo","args","secondAutomaton","handleTransitionsChange","getFullYear","getDay","getDate","getHours","getMinutes","copy","first","handleTransitionsChangeSecond","useEffect","removedFinal","console","log","FormControlLabel","control","Switch","prev","Collapse","in","noValidate","autoComplete","aria-readonly","marginLeft","forceUpdate","dfa","fontSize","paddingBottom","special","multiline","textAlign","fontFamily","renderSecondAutomaton","downloadLog","AutomataForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e3d4216.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core'\n\nconst Header = () => (\n    <AppBar position='static'>\n        <Toolbar className='header_header'>\n                <h3 className='header_title'>App Automata</h3>\n        </Toolbar>\n    </AppBar>\n\n)\n\nexport default Header;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    root: {\n\n        \"& .MuiTextField-root\": {\n            margin: theme.spacing(1),\n            width: \"25ch\",\n        },\n    },\n    root_tabs: {\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n    },\n    container_transitions: {\n        margin: theme.spacing(1),\n        maxHeight: 440,\n        maxWidth: 1000,\n    },\n    table_transitions: {\n        minWidth: 700,\n    },\n    root_cajaTexto: {\n        '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: '25ch',\n        },\n      },\n      formControl_multiSelect: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n      },\n      formControl_simpleSelect: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n      },\n}));\n\nexport const today = new Date();","import React from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport { useStyles } from \"../utils/makeStyle\";\n\nexport default function SimpleSelect({\n  options,\n  value,\n  onChange,\n  helperText,\n  nullable = true,\n  minWidth = 100,\n  children,\n}) {\n  const classes = useStyles();\n  return (\n    <FormControl\n      variant=\"outlined\"\n      className={classes.formControl_simpleSelect}\n      style={{ minWidth }}\n    >\n      <InputLabel id=\"simple-select-input\">{children}</InputLabel>\n      <Select\n        labelId=\"simple-select-input\"\n        id=\"simple-select-input\"\n        value={value}\n        onChange={onChange}\n        label={children}\n        helperText={helperText}\n        disabled={options.length === 0}\n      >\n        {nullable && (\n          <MenuItem>\n            <em>Ninguno</em>\n          </MenuItem>\n        )}\n        {options.map((option) => (\n          <MenuItem key={option} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  TextField,\n  IconButton,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  Button,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nexport default function InputDialog({\n  values,\n  label,\n  join = \", \",\n  onChange,\n  isError,\n  helpers,\n  children,\n}) {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  function handleOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleValueChange(event) {\n    setValue(event.target.value);\n  }\n\n  function handleAccept() {\n    onChange(value);\n    handleClose();\n  }\n\n  function handleEdit() {\n    handleOpen();\n    setValue(values.join(join));\n  }\n\n  return (\n    <div>\n      <TextField\n        id=\"input-dialog\"\n        label={label}\n        value={values.join(join)}\n        InputProps={{ readOnly: true }}\n        variant=\"outlined\"\n        style={{ pointerEvents: \"none\" }}\n      />\n      <IconButton\n        color=\"primary\"\n        onClick={handleEdit}\n        style={{ marginTop: 10 }}\n      >\n        <EditIcon />\n      </IconButton>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        styles={{ width: 10 }}\n        aria-labelledby=\"input-dialog-dialog\"\n      >\n        <DialogTitle id=\"input-dialog-title\">{label}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{children}</DialogContentText>\n          <TextField\n            id=\"input-dialog-input\"\n            label={label}\n            fullWidth\n            autoFocus\n            value={value}\n            variant=\"outlined\"\n            error={isError?.(value)}\n            onChange={handleValueChange}\n            helperText={isError?.(value) ? helpers?.error : helpers?.noError}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancelar\n          </Button>\n          <Button\n            onClick={handleAccept}\n            color=\"primary\"\n            disabled={isError?.(value)}\n          >\n            Aceptar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useStyles } from \"../utils/makeStyle\";\n\nexport default function MultiSelect({\n  options,\n  value,\n  onChange,\n  helperText,\n  minWidth = 100,\n  children,\n}) {\n  const classes = useStyles();\n\n  return (\n    <FormControl\n      variant=\"outlined\"\n      className={classes.formControl_multiSelect}\n      style={{ minWidth }}\n    >\n      <InputLabel id=\"multiselect-input\">{children}</InputLabel>\n      <Select\n        labelId=\"multiselect-input\"\n        id=\"multiselect-input\"\n        multiple\n        value={value}\n        onChange={onChange}\n        label={children}\n        helperText={helperText}\n        disabled={options.length === 0}\n      >\n        {options.map((option, index) => (\n          <MenuItem key={index} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","export class Error {\n  constructor({ msg, context }) {\n    this.msg = msg;\n    this.context = context;\n  }\n}\n","/**\n * Determina si la salida es de tipo AFND.\n *\n * @param {string|string[]} output - Salida (estado o conjunto de estados).\n * @returns {boolean} `true` si la salida es de tipo AFND, `false` en caso\n * contrario.\n */\nexport function isNFA({ output }) {\n  return output instanceof Array;\n}\n\nfunction joinCommonEnds(links) {\n  let common = new Map();\n\n  for (const { from, to, text } of links) {\n    const key = `${from}, ${to}`;\n\n    if (common.has(key)) {\n      common.get(key).push(text);\n    } else {\n      common.set(key, [text]);\n    }\n  }\n\n  return [...common].map(([key, joined]) => {\n    const [from, to] = key.split(\", \");\n    return { from, to, text: joined.sort().join(\", \") };\n  })\n}\n\n/**\n * Obtenemos los links para crear la visualización del autómata\n *\n * @param {Map} transitions - Transiciones obtenidas a partir de la clase o creadas\n * de la forma : [\"X\", new Map([[\"a\", \"X\"], [\"b\", \"Y\"]])],\n * @returns {[{}]} - Retorna un array\n */\nexport function getLinks(transitions) {\n  if (transitions == null) {\n    return [];\n  }\n\n  let links = [];\n\n  for (const [input, outputs] of transitions) {\n    for (const [reading, output] of outputs) {\n      if (output instanceof Array) {\n        for (const state of output) {\n          links.push({ from: input, to: state, text: reading });\n        }\n      } else {\n        links.push({ from: input, to: output, text: reading });\n      }\n    }\n  }\n\n  return joinCommonEnds(links);\n}\n\n/**\n * Obtenemos los nodos (estados) del autómata\n *\n * @param {string[]} allStates - Todos los estados del autómata\n * @param {string[]} finalStates - El estado o todos los estados final/finales del\n * autómata\n * @param {string} initialState - Estado inicial del autómata.\n * @returns {[{}]} - Retorna un array\n */\nexport function getNodesData(allStates, finalStates, initialState) {\n  if (allStates == null || finalStates == null) {\n    return [];\n  }\n\n  return allStates.map((state) => ({\n    key: state,\n    text: state === initialState ? `{${state}}` : state,\n    color: finalStates.includes(state) ? \"orange\" : \"white\",\n  }));\n}\n","import { intersection, pull } from \"lodash-es\";\nimport { isNFA } from \"./utils.js\";\n\n/**\n * Determina si un estado del autómata es válido.\n *\n * @param {string} state - Estado a evaluar.\n * @returns {boolean} `true` si el estado es válido, `false` en caso\n * contrario.\n */\nexport function isValid({ state }) {\n  return this.states.all.includes(state);\n}\n\n/**\n * Determina si un estado del autómata es inicial.\n *\n * @param {string} state - Estado a evaluar.\n * @returns {boolean} `true` si el estado es inicial, `false` en caso\n * contrario.\n */\nexport function isInitial({ state }) {\n  return state === this.states.initial;\n}\n\n/**\n * Determina si un estado del autómata es final.\n *\n * @param {string} state - Estado a evaluar.\n * @returns {boolean} `true` si el estado es final, `false` en caso contrario.\n */\nexport function isFinal({ state }) {\n  return this.states.final.includes(state);\n}\n\n/**\n * Reemplaza un estado del autómata por uno nuevo.\n *\n * @this {NFA} AFND.\n * @param {{ replaced: string, replacement: string, merge: boolean}}\n * @returns {boolean} `true` si el estado se encontraba en el autómata y fue\n * eliminado, `false` en caso contrario.\n */\nexport function replace({ replaced, replacement, merge = false }) {\n  const replace = ({ array, replaced, replacement }) => {\n    array.splice(array.indexOf(replaced), 1, replacement);\n  };\n\n  const mergeOrReplace = ({ array }) => {\n    merge ? pull(array, replaced) : replace({ array, replaced, replacement });\n  };\n\n  if (!this.transitions.has(replaced)) {\n    return false;\n  }\n\n  if (this.states.isInitial({ state: replaced })) {\n    this.states.initial = replacement;\n  }\n\n  mergeOrReplace({ array: this.states.all });\n\n  // Reemplaza por el estado de reemplazo o elimina al estado eliminado de los\n  // estado totales.\n  if (this.states.isFinal({ state: replaced })) {\n    mergeOrReplace({ array: this.states.final });\n  }\n\n  this.transitions.set(replacement, this.transitions.get(replaced));\n  this.transitions.delete(replaced);\n\n  // Recorrer las transiciones restantes para encontrar aquellas que son\n  // incidentes al estado reemplazado, y redirigirlas hacia el estado de\n  // reemplazo.\n  for (const [input, outputs] of this.transitions) {\n    for (const [reading, output] of outputs) {\n      // Reemplazar el estado de salida de la transición por el de reemplazo.\n      if (isNFA({ output }) && output.includes(replaced)) {\n        replace({\n          array: this.transitions.get(input).get(reading),\n          replaced,\n          replacement,\n        });\n      } else if (output === replaced) {\n        this.transitions.get(input).set(reading, replacement);\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Normaliza los nombres de los estados del autómata, dados un prefijo y un\n * sufijo inicial.\n *\n * @param {string} [prefix=\"q\"] - Prefijo de los nuevos nombres de los\n * estados.\n * @param {number} [suffix=0] - Sufijo inicial de los nuevos nombres de los\n * estados, asignado incrementalmente.\n * @returns {NFA} `this`.\n */\nexport function normalize({ prefix = \"q\", suffix = 0 }) {\n  // 1era iteración: renombrar los estados a llaves que se tenga la seguridad\n  //                 que no existen anteriormente, en este caso números\n  //                 consecutivos.\n  // 2da iteración:  renombrar los estados según su nombre dado en la\n  //                 iteración pasada, con el prefijo incluido.\n  for (const iteration of [1, 2]) {\n    const states = this.states.all;\n    for (const state of states) {\n      this.states.replace({\n        replaced: state,\n        replacement: iteration === 1 ? suffix++ : prefix + state,\n        merge: false,\n      });\n    }\n  }\n\n  return this;\n}\n\n/**\n * Encuentra los estados en común entre dos autómatas.\n *\n * @param {NFA} other - Autómata a comparar.\n * @returns {string[]} Estados en común entre los dos autómatas.\n */\nexport function common(other) {\n  return intersection(this.states.all, other.states.all);\n}\n","import { Error } from \"../error.js\";\nimport { isNFA } from \"./utils.js\";\nimport * as stateCallbacks from \"./state.js\";\nimport { bind, cloneDeep, flatten, range, uniq } from \"lodash-es\";\n\n\nexport const Epsilon = Object.freeze({\n  symbol: \"ε\",\n  value: \"\",\n})\n\n/**\n * @typedef {Object} States\n *   @property {string[]|number[]} all - Todos los estados.\n *   @property {string|number} initial - Estado inicial.\n *   @property {string[]|number[]} final - Estados finales.\n */\n\n// TODO: resolver estados de salida simples (String en vez de Array).\n/**\n * Representación de un autómata finito no determinístico.\n * @class\n */\nexport class NFA {\n  /**\n   * @constructor\n   * @param {States} states - Estados totales, finales e inicial del autómata.\n   * @param {string[]} alphabet - Alfabeto reconocido por el autómata.\n   * @param {Map<string, Map<string, string[]>>} transitions - Tabla de\n   * transiciones del autómata.\n   *\n   * @example\n   * const states = {\n   *   all: [\"P\", \"I\"],\n   *   initial: \"P\",\n   *   final: [\"I\"],\n   * };\n   *\n   * const alphabet = [\"a\", \"b\"];\n   *\n   * // NOTE: a diferencia de los DFA, la salida de una transición es una lista.\n   * // Estando en \"P\": leyendo una \"a\", pasar a cualquiera entre {\"I\", \"P\"}, o\n   * //                 leyendo una \"b\", pasar a cualquiera entre {\"P\"}.\n   * // Estando en \"I\": leyendo una \"a\", pasar a cualquiera entre {\"P\"}, o\n   * //                 leyendo una \"b\", pasar a cualquiera entre {\"I\", \"P\"}.\n   * const transitions = new Map([\n   *   [ \"P\", new Map([[\"a\", [\"I\", \"P\"]], [\"b\", [\"P\"]]]) ],\n   *   [ \"I\", new Map([[\"a\", [\"P\"]], [\"b\", [\"I\", \"P\"]]]) ],\n   * ]);\n   *\n   * const nfa = new NFA({ states, alphabet, transitions });\n   */\n  constructor({ states, alphabet, transitions }) {\n    // Determina si un arreglo es subconjunto de otro arreglo.\n    function isSubset({ subset, set }) {\n      return subset.every((e) => set.includes(e));\n    }\n\n    // Determina si las transiciones son válidas.\n    function validTransitions({ states, alphabet, transitions }) {\n      const validOutputs = ({ states, alphabet, outputs }) => {\n        return [...outputs].every(([reading, output]) => {\n          // Determina si el estado de salida es válido, independiente si es de\n          // tipo AFD o AFND.\n          const isValidOutput =\n            (isNFA({ output }) && isSubset({ subset: output, set: states })) ||\n            states.includes(output);\n\n          // Determina si la lectura es vacía (epsilon) o si cada símbolo de\n          // ella está incluido en el alfabeto del autómata.\n          const isValidReading =\n            reading === Epsilon.symbol ||\n            isSubset({ subset: reading.split(\"\"), set: alphabet });\n\n          return isValidOutput && isValidReading;\n        });\n      };\n\n      return [...transitions].every(\n        ([input, outputs]) =>\n          states.includes(input) && validOutputs({ states, alphabet, outputs })\n      );\n    }\n\n    if ([states.all, states.initial, states.final].includes(undefined)) {\n      throw new Error({\n        msg:\n          \"El autómata debe ser construido con los estados totales, \" +\n          \"finales y el estado inicial.\",\n        context: { states },\n      });\n    } else if (alphabet.length === 0) {\n      throw new Error({\n        msg: \"El alfabeto de entrada del autómata no puede ser vacío.\",\n        context: { alphabet },\n      });\n    } else if (!isSubset({ subset: states.final, set: states.all })) {\n      throw new Error({\n        msg:\n          \"El conjunto de estados finales debe ser un subconjunto del \" +\n          \"conjunto total de estados.\",\n        context: { states },\n      });\n    } else if (!states.all.includes(states.initial)) {\n      throw new Error({\n        msg:\n          \"El estado inicial debe estar contenido en el conjunto total de \" +\n          \"estados.\",\n        context: { states },\n      });\n    } else if (\n      !validTransitions({ states: states.all, alphabet, transitions })\n    ) {\n      throw new Error({\n        msg:\n          \"Al menos una de las transiciones no es válida, debido a que el \" +\n          \"estado de entrada o salida de la transición no pertenece al \" +\n          \"conjunto total de estados, o, la lectura de la transición no \" +\n          \"pertenece al alfabeto de entrada del autómata.\",\n        context: { states, alphabet, transitions },\n      });\n    }\n\n    // Ignora los duplicados del conjunto de total de estados y del conjunto de\n    // estados finales.\n    this.states = {\n      all: uniq(states.all).sort(),\n      initial: states.initial,\n      final: uniq(states.final).sort(),\n    };\n\n    // Asigna funciones de utilidad al objeto `this.states`, con el `this` de un\n    // objeto de la clase `NFA` bindeado a dichas funciones. Además, las\n    // establece como no enumerables (no aparecen al inspeccionar un objeto\n    // `this.states`, o un objeto de la clase `NFA`, por extensión).\n    // NOTE: esto implica que un objeto de la clase `NFA` o cualquiera que la\n    // extienda, no puede ser clonado con `cloneDeep` de lodash.\n    // Ver `NFA.clone` o `DFA.clone`.\n    Object.defineProperties(this.states, {\n      isInitial: { value: bind(stateCallbacks.isInitial, this) },\n      isFinal: { value: bind(stateCallbacks.isFinal, this) },\n      replace: { value: bind(stateCallbacks.replace, this) },\n      normalize: { value: bind(stateCallbacks.normalize, this) },\n      common: { value: bind(stateCallbacks.common, this) },\n    });\n\n    this.alphabet = alphabet;\n    this.transitions = new Map([...transitions].sort());\n  }\n\n  /**\n   * Asigna una transición en la tabla.\n   *\n   * @param {string} from - Estado de entrada.\n   * @param {string} to - Estado de salida.\n   * @param {string} reading - Lectura de la transición.\n   */\n  setTransition({ from, to, reading }) {\n    if (!this.states.all.includes(from)) {\n      this.states.all.push(from);\n    }\n\n    if (!this.states.all.includes(to)) {\n      this.states.all.push(to);\n    }\n\n    if (this.transitions.has(from)) {\n      const output = this.transitions.get(from).get(reading);\n      this.transitions\n        .get(from)\n        .set(reading, isNFA({ output }) ? flatten([...output, to]) : to);\n    } else {\n      this.transitions.set(from, new Map([[reading, to]]));\n    }\n  }\n\n  /**\n   * Normaliza las transiciones cuya lectura es de más de un carácter.\n   *\n   * @returns {NFA} AFND normalizado.\n   */\n  normalized() {\n    let normalized = this.clone();\n    normalized.states.normalize({ suffix: 0 });\n\n    const prefix = \"t\";\n    let count = 0;\n\n    for (const [input, outputs] of this.transitions) {\n      for (const [reading, output] of outputs) {\n        const size = reading?.length ?? 0;\n\n        if (size < 1) {\n          continue;\n        }\n\n        normalized.transitions.get(input)?.delete(reading);\n\n        // Determina la lista de estados transitorios.\n        const intermediaries = range(count, (count += size - 1)).map(\n          (n) => prefix + n\n        );\n\n        const chain = [input, ...intermediaries, output];\n\n        for (let i = 0; i < chain.length - 1; i++) {\n          normalized.setTransition({\n            from: chain[i],\n            to: chain[i + 1],\n            reading: reading[i],\n          });\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  /**\n   * Crea una copia recursiva del autómata.\n   *\n   * @returns {NFA} Autómata.\n   *\n   * Se debe usar esta función en lugar de `cloneDeep` de `lodash`, ya que ésta\n   * última clona el autómata sin rebindear `this` a los callbacks del objeto\n   * `this.states`.\n   */\n  clone() {\n    return new NFA({\n      states: cloneDeep(this.states),\n      alphabet: [...this.alphabet],\n      transitions: cloneDeep(this.transitions),\n    });\n  }\n\n  /**\n   * Retorna la unión entre el autómata `this` y el autómata `other`.\n   *\n   * @param {NFA} other - Autómata a unir.\n   * @returns {?NFA} AFND correspondiente de la unión de los autómatas, o `null`\n   * si `other` es `null`.\n   */\n  union(other) {\n    if (other == null) {\n      return null;\n    }\n\n    let lhs = this.clone();\n    let rhs = other.clone();\n\n    let initial = {\n      // El formato de los nombres de los estados del nuevo autómata es \"qx\",\n      // donde x es es el número del estado en orden de ocurrencia.\n      state: \"q0\",\n    };\n\n    // Si entre los dos autómatas existe al menos un nombre de estado en común,\n    // o alguno de ellos contiene un estado con el mismo nombre del nuevo estado\n    // inicial, normalizar los nombres de sus estados.\n    if (\n      lhs.states.common(rhs).length > 0 ||\n      [...lhs.states.all, ...rhs.states.all].includes(initial.state)\n    ) {\n      // El sufijo 0 está reservado para el nuevo estado inicial.\n      lhs.states.normalize({ suffix: 1 });\n      rhs.states.normalize({ suffix: lhs.states.all.length + 1 });\n    }\n\n    // Transición inicial.\n    initial.output = new Map([\n      [Epsilon.symbol, [lhs.states.initial, rhs.states.initial]],\n    ]);\n\n    return new NFA({\n      states: {\n        all: [initial.state, ...lhs.states.all, ...rhs.states.all],\n        initial: initial.state,\n        final: [...lhs.states.final, ...rhs.states.final],\n      },\n      alphabet: uniq([...lhs.alphabet, ...rhs.alphabet]),\n      transitions: new Map([\n        [initial.state, initial.output],\n        ...lhs.transitions,\n        ...rhs.transitions,\n      ]),\n    });\n  }\n\n  /**\n   * Retorna la concatenación entre el autómata `this` y el autómata `other`.\n   *\n   * @param {NFA} other - Autómata a concatenar.\n   * @returns {?NFA} AFND que representa la concatenación de los autómatas, o\n   * `null` si `other` es `null`.\n   */\n  concatenation(other) {\n    if (other == null) {\n      return null;\n    }\n\n    let lhs = this.clone();\n    let rhs = other.clone();\n\n    // Si entre los dos autómatas existe al menos un nombre de estado en común,\n    // normalizar los nombres de sus estados.\n    if (lhs.states.common(rhs).length > 0) {\n      lhs.states.normalize({ suffix: 0 });\n      rhs.states.normalize({ suffix: lhs.states.all.length });\n    }\n\n    // Conectar los estados finales del primer autómata con el estado inicial\n    // del segundo, con lectura vacía (epsilon).\n    for (const final of lhs.states.final) {\n      lhs.transitions.get(final)?.set(Epsilon.symbol, rhs.states.initial);\n    }\n\n    return new NFA({\n      states: {\n        all: [...lhs.states.all, ...rhs.states.all],\n        initial: lhs.states.initial,\n        final: rhs.states.final,\n      },\n      alphabet: uniq([...lhs.alphabet, ...rhs.alphabet]),\n      transitions: new Map([...lhs.transitions, ...rhs.transitions]),\n    });\n  }\n}\n","import { NFA, Epsilon } from \"./nfa.js\";\nimport { Error } from \"../error.js\";\nimport {\n  cloneDeep,\n  compact,\n  difference,\n  flatten,\n  intersection,\n  isEqual,\n  minBy,\n  union,\n  uniq,\n} from \"lodash-es\";\n\n/**\n * Representación de un autómata finito determinístico.\n * @class\n */\nexport class DFA extends NFA {\n  /**\n   * @constructor\n   * @param {States} states - Estados totales, finales e inicial del autómata.\n   * @param {string[]} alphabet - Alfabeto reconocido por el autómata.\n   * @param {Map<string, Map<string, string>>} transitions - Tabla de\n   * transiciones del autómata.\n   *\n   * @example\n   * const states = {\n   *   all: [\"P\", \"I\"],\n   *   initial: \"P\",\n   *   final: [\"I\"],\n   * };\n   *\n   * const alphabet = [\"a\", \"b\"];\n   *\n   * // Estando en \"P\": leyendo una \"a\", pasar a \"I\", o\n   * //                 leyendo una \"b\", pasar a \"P\".\n   * // Estando en \"I\": leyendo una \"a\", pasar a \"P\", o\n   * //                 leyendo una \"b\", pasar a \"I\".\n   * const transitions = new Map([\n   *   [ \"P\", new Map([[\"a\", \"I\"], [\"b\", \"P\"]]) ],\n   *   [ \"I\", new Map([[\"a\", \"P\"], [\"b\", \"I\"]]) ],\n   * ]);\n   *\n   * const dfa = new DFA({ states, alphabet, transitions });\n   */\n  constructor({ states, alphabet, transitions }) {\n    // Determina la cantidad de transiciones del autómata.\n    function size({ transitions }) {\n      return [...transitions.values()].reduce(\n        (accumulator, outputs) => accumulator + outputs.size,\n        0\n      );\n    }\n\n    // Determina si las lecturas de las transiciones tienen exactamente 1\n    // carácter.\n    function validReadings({ transitions }) {\n      return [...transitions.values()].every(\n        ([reading]) => reading.length === 1\n      );\n    }\n\n    if (validReadings({ transitions })) {\n      throw new Error({\n        msg:\n          \"Las lecturas en la tabla de transiciones deben tener exactamente 1 \" +\n          \"cáracter.\",\n        context: { transitions },\n      });\n    }\n\n    if (states.all.length * alphabet.length !== size({ transitions })) {\n      throw new Error({\n        msg:\n          \"La cantidad de transiciones no coincide con la cantidad \" +\n          \"de estados y el número de carácteres del alfabeto del autómata.\",\n        context: { states, alphabet, transitions },\n      });\n    }\n\n    super({ states, alphabet, transitions });\n  }\n\n  /**\n   * Construye un AFD a partir de un AFND.\n   *\n   * @param {NFA} nfa - AFND.\n   * @returns {DFA} AFD equivalente al AFND.\n   */\n  static from({ nfa }) {\n    const reading = {\n      // Obtiene el conjunto de estados a los que se puede llegar partiendo\n      // desde `state` pasando sólo leyendo epsilon.\n      epsilon: ({ state }) => {\n        let output = [];\n\n        // Recorre la tabla de transiciones, desde el `state` hasta el último\n        // estado accesible solo leyendo epsilon.\n        for (\n          let next = state;\n          next != null;\n          next = nfa.transitions.get(next)?.get(Epsilon.symbol)\n        ) {\n          output.push(...flatten([next]));\n        }\n\n        return uniq(output).sort();\n      },\n\n      // Obtiene los estados de salida de `state`, leyendo `symbol` o epsilon.\n      includingEpsilon: ({ state, symbol }) => {\n        // Para cada estado de `reduced`, obtener estado de salida leyendo\n        // `symbol`.\n        const states = reduceUnion({\n          reduced: reading.epsilon({ state }),\n          add: (state) => {\n            const output = nfa.transitions.get(state)?.get(symbol);\n            return [...flatten(compact([output]))];\n          },\n        });\n\n        // Por cada estado del conjunto anterior, obtener `reading.epsilon`.\n        return reduceUnion({\n          reduced: states,\n          add: (state) => reading.epsilon({ state }),\n        });\n      },\n    };\n\n    const reduceUnion = ({ reduced, add }) => {\n      return reduced\n        .reduce((accumulator, e) => union(accumulator, add(e)), [])\n        .sort();\n    };\n\n    // Agrega el sumidero, si ya no ha sido agregado.\n    const addSink = ({ transitions, states }) => {\n      if (transitions.has(sink)) {\n        return;\n      }\n\n      // El sumidero consume todos los símbolos del alfabeto hacia él mismo.\n      transitions.set(\n        sink,\n        new Map(nfa.alphabet.map((symbol) => [symbol, sink]))\n      );\n\n      states.all.push(sink);\n    };\n\n    // Establece la transición entre la entrada, salida y símbolo.\n    const setTransition = ({ input, symbol, output, transitions, states }) => {\n      if (transitions.has(input.state)) {\n        transitions.get(input.state).set(symbol, output);\n        return;\n      }\n\n      transitions.set(input.state, new Map([[symbol, output]]));\n      states.all.push(input.state);\n\n      // Si uno de los estados dentro del conjunto de estados es final, el\n      // nuevo estado es final.\n      if (input.isFinal) {\n        states.final.push(input.state);\n      }\n    };\n\n    const normalized = nfa.normalized();\n    const initial = reading.epsilon({ state: normalized.states.initial });\n    const sink = \"qS\";\n\n    let transitions = new Map([]);\n    let set = [initial];\n    let states = { all: [], final: [] };\n\n    for (const current of set) {\n      for (const symbol of normalized.alphabet) {\n        // Por cada estado del conjunto `current`, obtener\n        // `reading.includingEpsilon`.\n        let next = reduceUnion({\n          reduced: current,\n          add: (state) => reading.includingEpsilon({ state, symbol }),\n        });\n\n        // El conjunto de estados `current` no tiene transiciones para `symbol`.\n        // Agregarlas a un sumidero.\n        if (next.length === 0) {\n          next = [sink];\n          addSink({ transitions, states });\n        }\n\n        // Agregar el nuevo conjunto de estados, si no ha sido agregado antes.\n        else if (set.every((current) => !isEqual(current, next))) {\n          set.push(next);\n        }\n\n        setTransition({\n          input: {\n            state: current.join(\"\"),\n            isFinal: current.some((state) =>\n              normalized.states.isFinal({ state })\n            ),\n          },\n          output: next.join(\"\"),\n          symbol,\n          transitions,\n          states,\n        });\n      }\n    }\n\n    return new DFA({\n      states: { ...states, initial: initial.join(\"\") },\n      alphabet: [...normalized.alphabet],\n      transitions,\n    });\n  }\n\n  /**\n   * Crea una copia recursiva del autómata.\n   *\n   * @returns {DFA} Autómata.\n   *\n   * Se debe usar esta función en lugar de `cloneDeep` de `lodash`, ya que ésta\n   * última clona el autómata sin rebindear `this` a los callbacks del objeto\n   * `this.states`.\n   */\n  clone() {\n    return new DFA({\n      states: cloneDeep(this.states),\n      alphabet: [...this.alphabet],\n      transitions: cloneDeep(this.transitions),\n    });\n  }\n\n  /**\n   * Retorna la minimización del autómata.\n   *\n   * @returns {DFA} Autómata simplificado.\n   *\n   * Implementación del algoritmo de Hopcroft de minimizacíon de autómatas por\n   * clases de equivalencia.\n   */\n  minimal() {\n    // Reemplaza el elemento i-ésimo de `equivalences` en éste y en `stack`, por\n    // los elementos de `replacement`.\n    const replace = ({ equivalences, stack, at, replacement }) => {\n      if (replacement.some((value) => value.length === 0)) {\n        return;\n      }\n\n      // Busca la clase de equivalencia en el stack.\n      const index = stack.findIndex((equivalence) =>\n        isEqual(equivalence, equivalences[at])\n      );\n\n      // Reemplaza la clase de equivalencia por la intersección y diferencia.\n      equivalences.splice(at, 1, ...replacement);\n\n      if (index !== -1) {\n        // Si se encontró dicha clase, reemplazarla por la intersección y\n        // diferencia.\n        stack.splice(index, 1, ...replacement);\n      } else {\n        // Si no se encontró, insertar la intersección o la diferencia,\n        // dependiendo cuál tenga la menor cantidad de elemntos.\n        stack.push(minBy(replacement, \"length\"));\n      }\n    };\n\n    // Retorna la lista de clases de equivalencia del autómata.\n    const equivalences = () => {\n      // Lista de clases de equivalencia. Inicialmente contiene los estados\n      // finales y no finales.\n      let equivalences = [\n        this.states.final,\n        difference(this.states.all, this.states.final),\n      ];\n\n      let stack = [...equivalences];\n\n      while (stack.length > 0) {\n        const current = stack.pop();\n        for (const symbol of this.alphabet) {\n          // Encuentra los estados del autómata que al leer el `symbol` llegan a\n          // un estado contenido en `current`.\n          let equivalence = this.states.all.filter((state) =>\n            current.includes(this.transitions.get(state).get(symbol))\n          );\n\n          // Por cada clase de equivalencia, calcular la intersección y\n          // diferencia entre la i-ésima clase y la clase encontrada en el paso\n          // anterior.\n          for (const i of equivalences.keys()) {\n            replace({\n              equivalences,\n              stack,\n              at: i,\n              replacement: [\n                intersection(equivalence, equivalences[i]),\n                difference(equivalences[i], equivalence),\n              ],\n            });\n          }\n        }\n      }\n\n      return equivalences;\n    };\n\n    let minimal = this.clone();\n\n    // En la lista de clases de equivalencia, las clases que tengan 2 estados\n    // son fusionables.\n    const mergeable = equivalences().filter(\n      (equivalence) => equivalence.length === 2\n    );\n\n    for (const [replaced, replacement] of mergeable) {\n      minimal.states.replace({ replaced, replacement, merge: true });\n    }\n\n    return minimal;\n  }\n\n  /**\n   * Retorna el complemento del autómata.\n   *\n   * @returns {DFA} Complemento del autómata.\n   */\n  complement() {\n    return new DFA({\n      ...this,\n      states: {\n        ...this.states,\n        final: difference(this.states.all, this.states.final),\n      },\n    });\n  }\n\n  /**\n   * Retorna la intersección entre el autómata `this` y el autómata `other`.\n   *\n   * @param {DFA} other - Autómata a intersectar.\n   * @returns {?DFA} Intersección de los autómatas, o `null` si `other` es `null`.\n   */\n  intersection(other) {\n    if (other == null) {\n      return null;\n    }\n\n    const lhs = this.complement();\n    const rhs = other.complement();\n    const union = DFA.from({ nfa: lhs.union(rhs) });\n    return union.minimal().complement();\n  }\n}\n","export { NFA, Epsilon } from \"./nfa.js\";\nexport { DFA } from \"./dfa.js\";\n\nexport const Type = Object.freeze({\n  DFA: \"dfa\",\n  NFA: \"nfa\",\n});\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SimpleSelect from \"./SimpleSelect.js\";\nimport MultiSelect from \"./MultiSelect.js\";\nimport { useStyles } from \"../utils/makeStyle.js\";\nimport { Type } from \"../lib/automata/automata.js\";\nimport { flatten } from \"lodash-es\";\n\nexport default function Transitions({\n  type,\n  transitions,\n  alphabet,\n  states,\n  onChange,\n}) {\n  const classes = useStyles();\n  return (\n    <TableContainer className={classes.container_transitions} component={Paper}>\n      <Table\n        className={classes.table_transitions}\n        aria-label=\"customized table\"\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Estados</TableCell>\n            {alphabet.map((char) => (\n              <TableCell align=\"center\">{char}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {states.map((state) => (\n            <TableRow key={state}>\n              <TableCell>{state}</TableCell>\n              {alphabet.map((symbol) => (\n                <TableCell align=\"center\">\n                  {type === Type.DFA ? (\n                    <SimpleSelect\n                      options={states}\n                      value={transitions?.get(state)?.get(symbol)}\n                      onChange={(event) => onChange(state, symbol, event)}\n                    />\n                  ): (\n                    <MultiSelect\n                      options={states}\n                      value={[...flatten([transitions?.get(state)?.get(symbol)])]}\n                      onChange={(event) => onChange(state, symbol, event)}\n                    />\n                  )}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport * as go from \"gojs\";\nimport { ReactDiagram } from \"gojs-react\";\n\n// https://gojs.net/latest/samples/fdLayout.html\nfunction FDLayout() {\n  go.ForceDirectedLayout.call(this);\n}\n\ngo.Diagram.inherit(FDLayout, go.ForceDirectedLayout);\n\nFDLayout.prototype.makeNetwork = function (coll) {\n  let net = go.ForceDirectedLayout.prototype.makeNetwork.call(this, coll);\n\n  net.vertexes.each(function (vertex) {\n    let node = vertex.node;\n    if (node !== null) vertex.isFixed = node.isSelected;\n  });\n\n  return net;\n};\n\nfunction initDiagram(isDirected) {\n  const $ = go.GraphObject.make;\n\n  const diagram = $(go.Diagram, {\n    \"undoManager.isEnabled\": true,\n    autoScale: go.Diagram.Uniform, // Zoom to make everything fit in the viewport.\n    layout: $(go.CircularLayout),\n    model: $(go.GraphLinksModel, {\n      linkKeyProperty: \"key\",\n    }),\n  });\n\n  var lay = diagram.layout;\n\n  var spacing = 200;\n  spacing = parseFloat(spacing, 200);\n  lay.spacing = spacing;\n\n  lay = go.CircularLayout.ConstantSpacing;\n\n  diagram.nodeTemplate = $(\n    go.Node,\n    \"Auto\", // the Shape will go around the TextBlock\n    new go.Binding(),\n    $(\n      go.Shape,\n      \"Circle\",\n      { name: \"SHAPE\", fill: \"white\", strokeWidth: 1, portId: \"\", },\n      // Shape.fill is bound to Node.data.color\n      new go.Binding(\"fill\", \"color\")\n    ),\n    $(\n      go.TextBlock,\n      { margin: 10, editable: false, font: \"26px Verdana\" },\n      new go.Binding(\"text\").makeTwoWay()\n    )\n  );\n\n  diagram.linkTemplate = $(\n    go.Link,\n    { curve: go.Link.Bezier },\n    $(go.Shape, { stroke: \"gray\" }),\n    $(go.Shape, { toArrow: isDirected ? \"Standard\" : \"\", stroke: \"gray\" }),\n    $(go.Panel, \"Auto\",  // this whole Panel is a link label\n      $(go.TextBlock, { font: \"24px Verdana\", margin: 3 },\n        new go.Binding(\"text\", \"text\"))\n    )\n  );\n\n  return diagram;\n}\n\nconst Content = ({ data, linksData, isDirected }) => {\n\n  return (\n    <div className=\"content\">\n      <ReactDiagram\n        initDiagram={() => initDiagram(isDirected)}\n        divClassName={data.length > 15 ? \"diagram-xl-component\" : \"diagram-component\"}\n        linkDataArray={linksData}\n        nodeDataArray = {data}\n      />\n    </div>\n  );\n};\n\nexport default Content;\n","import React, { useState } from \"react\";\r\nimport { DFA, Type } from \"../lib/automata/automata.js\";\r\nimport { getLinks, getNodesData } from \"../lib/automata/utils\";\r\nimport Content from \"./Content\";\r\n\r\nfunction checkNull(lhs, rhs) {\r\n  if (lhs == null || rhs == null) {\r\n    return (\r\n      <h3 className=\"text-error\">\r\n        El autómata resultante es inválido dado que alguno de los componentes\r\n        iniciales es inválido\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nfunction forceDFA(automaton) {\r\n  if (automaton == null) {\r\n    return null;\r\n  }\r\n\r\n  if (automaton instanceof DFA) {\r\n    return automaton;\r\n  }\r\n\r\n  return DFA.from({ nfa: automaton }).minimal();\r\n}\r\n\r\nfunction status(type) {\r\n  if (type === Type.DFA) {\r\n    return \"inicial\";\r\n  }\r\n\r\n  return \"(convertido a AFD y simplificado)\";\r\n}\r\n\r\nfunction statuses(lhsType, rhsType) {\r\n  if (lhsType === Type.NFA && rhsType === Type.NFA) {\r\n    return \"autómatas 1 y 2 transformados a AFD y simplificados\";\r\n  } else if (lhsType === Type.NFA) {\r\n    return \"autómata 1 transformado a AFD y simplificado\";\r\n  } else if (rhsType === Type.NFA) {\r\n    return \"autómata 2 transformado a AFD y simplificado\";\r\n  } else {\r\n    return \"resultado\";\r\n  }\r\n}\r\n\r\nconst Tabs = ({ lhs, rhs, lhsType, rhsType }) => {\r\n\r\n  const [toggleState, setToggleState] = useState(1);\r\n\r\n  const toggleTab = (index) => {\r\n    setToggleState(index);\r\n  };\r\n\r\n  function renderAutomaton(automaton) {\r\n    return (\r\n      <Content\r\n        data={getNodesData(\r\n          automaton?.states.all,\r\n          automaton?.states.final,\r\n          automaton?.states.initial\r\n        )}\r\n        linksData={getLinks(automaton?.transitions)}\r\n        isDirected={true}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container-tabs\">\r\n      <div className=\"bloc-tabs\">\r\n        {[\"Simplificación\", \"Complementos\", \"Unión\", \"Concatenación\", \"Intersección\"].map((value, index) => (\r\n          <button\r\n            className={toggleState === index + 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n            onClick={() => toggleTab(index + 1)}\r\n          >\r\n            {value}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"content-fg-tabs\">\r\n        <div\r\n          className={\r\n            toggleState === 1\r\n              ? \"content-tabs  active-content-tabs\"\r\n              : \"content-tabs\"\r\n          }\r\n        >\r\n          <div className=\"flex-diagrama-content\">\r\n            {checkNull(lhs, rhs)}\r\n            <div className='aux-flex'>\r\n              <div className='aux-flex-child'>\r\n                <h2 className='text-child'>Automata 1 {status(lhsType)}</h2>\r\n                {renderAutomaton(forceDFA(lhs)?.minimal())}\r\n              </div>\r\n              <div className='aux-flex-child'>\r\n                <h2 className='text-child'>Automata 2 {status(rhsType)}</h2>\r\n                {renderAutomaton(forceDFA(rhs)?.minimal())}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            toggleState === 2\r\n              ? \"content-tabs  active-content-tabs\"\r\n              : \"content-tabs\"\r\n          }\r\n        >\r\n          <div className=\"flex-diagrama-content\">\r\n            {checkNull(lhs, rhs)}\r\n\r\n            <div className='aux-flex'>\r\n              <div className='aux-flex-child'>\r\n                <h2 className='text-child'>Automata 1 {status(lhsType)}</h2>\r\n                {renderAutomaton(forceDFA(lhs)?.complement())}\r\n              </div>\r\n              <div className='aux-flex-child'>\r\n                <h2 className='text-child'>Automata 2 {status(rhsType)}</h2>\r\n                {renderAutomaton(forceDFA(rhs)?.complement())}\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            toggleState === 3\r\n              ? \"content-tabs  active-content-tabs\"\r\n              : \"content-tabs\"\r\n          }\r\n        >\r\n          <div className=\"flex-diagrama-content\">\r\n            {checkNull(lhs, rhs)}\r\n\r\n            <div className='aux-container-flex'>\r\n              {renderAutomaton(lhs?.union(rhs))}\r\n              <h2 className='text-child-2'>Unión convertida a AFD y simplificada</h2>\r\n              {renderAutomaton(forceDFA(lhs?.union(rhs)))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            toggleState === 4\r\n              ? \"content-tabs  active-content-tabs\"\r\n              : \"content-tabs\"\r\n          }\r\n        >\r\n          <div className=\"flex-diagrama-content\">\r\n            {checkNull(lhs, rhs)}\r\n\r\n            <div className='aux-container-flex'>\r\n              {renderAutomaton(lhs?.concatenation(rhs))}\r\n              <h2 className='text-child-2'>Concatenación convertida a AFD y simplificada</h2>\r\n              {renderAutomaton(forceDFA(lhs?.concatenation(rhs)))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            toggleState === 5\r\n              ? \"content-tabs  active-content-tabs\"\r\n              : \"content-tabs\"\r\n          }\r\n        >\r\n          <div className=\"flex-diagrama-content\">\r\n            {checkNull(lhs, rhs)}\r\n\r\n            <div className='aux-flex-2'>\r\n              <div className='aux-flex-child-2'>\r\n                <h2 className='text-child'>Intersección ({statuses(lhsType, rhsType)})</h2>\r\n                {renderAutomaton(forceDFA(lhs)?.intersection(forceDFA(rhs)))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function RadioButtonsGroup({ options, value, onChange, children }) {\n  return (\n    <>\n      <div className=\"MuiFormHelperText-root\">{children}</div>\n      <ButtonGroup color=\"primary\" style={{ margin: \"10px 0px\" }}>\n        {options.map((option) => (\n          <Button\n            onClick={() => onChange(option.value)}\n            variant={value === option.value ? \"contained\" : \"outlined\"}\n          >\n            {option.label}\n          </Button>\n        ))}\n      </ButtonGroup>\n    </>\n  );\n}\n","import React, { useState, useEffect, useMemo } from 'react'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Collapse from '@material-ui/core/Collapse';\nimport TextField from \"@material-ui/core/TextField\";\nimport { Switch } from \"@material-ui/core\";\nimport { useStyles } from \"../utils/makeStyle.js\";\nimport { cloneDeep, difference, first, flatten, uniq } from \"lodash-es\";\nimport SimpleSelect from './SimpleSelect.js';\nimport InputDialog from './InputDialog.js';\nimport MultiSelect from './MultiSelect.js';\nimport Transitions from './Transitions.js';\nimport Content from './Content.js';\nimport Tabs from './Tabs.js';\nimport RadioButtonsGroup from './RadioButtonsGroup.js';\nimport { Debugout } from 'debugout.js';\nimport { DFA, NFA, Type, Epsilon } from \"../lib/automata/automata.js\";\nimport { getLinks, getNodesData } from '../lib/automata/utils.js';\n\nfunction arrayToString(array) {\n  return JSON.stringify(array, null, \"  \");\n}\n\nfunction mapToString(map) {\n  let flattened = new Map([...map]);\n\n  for (const [key, value] of flattened) {\n    flattened.set(key, [...value]);\n  }\n\n  return JSON.stringify([...flattened], null, \"  \");\n}\n\nconst types = [\n  { value: Type.DFA, label: \"AFD\" },\n  { value: Type.NFA, label: \"AFND\" },\n];\n\nconst logs = new Debugout();\nlet today = new Date();\n\nlogs.info('----------BIENVENIDO A LA APP DE AUTÓMATAS---------')\n\n// let defaults = null;\n\n// let defaults = {\n//   type: Type.DFA,\n//   states: {\n//     all: [\"q0\", \"q1\", \"q2\"],\n//     initial: \"q0\",\n//     final: [\"q0\", \"q2\"],\n//   },\n//   alphabet: [\"a\", \"b\"],\n//   transitions: new Map([\n//     [\"q0\", new Map([[\"a\", \"q2\"], [\"b\", \"q1\"]])],\n//     [\"q1\", new Map([[\"a\", \"q1\"], [\"b\", \"q1\"]])],\n//     [\"q2\", new Map([[\"a\", \"q0\"], [\"b\", \"q1\"]])],\n//   ])\n// }\n\nlet defaults = {\n  type: Type.NFA,\n  states: {\n    all: [\"q0\", \"q1\", \"q2\", \"q3\", \"q4\"],\n    initial: \"q0\",\n    final: [\"q1\"],\n  },\n  alphabet: [\"a\", \"b\"],\n  transitions: new Map([\n    [\"q0\", new Map([[\"a\", \"q2\"], [\"b\", \"q0\"], [\"ε\", \"q1\"] ])],\n    [\"q1\", new Map([[\"a\", \"q4\"], [\"b\", \"q1\"] ])],\n    [\"q2\", new Map([[\"a\", \"q0\"]])],\n    [\"q3\", new Map([[\"a\", \"q1\"]])],\n    [\"q4\", new Map([[\"a\", \"q3\"]])],\n  ]),\n}\n\nconst secondDefaults = {\n  type: Type.DFA,\n  states: {\n    all: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n    initial: \"5\",\n    final: [\"2\", \"3\", \"4\", \"5\"],\n  },\n  alphabet: [\"a\", \"b\"],\n  transitions: new Map([\n    [\"5\", new Map([[\"a\", \"4\"], [\"b\", \"3\"]])],\n    [\"4\", new Map([[\"a\", \"4\"], [\"b\", \"2\"]])],\n    [\"3\", new Map([[\"a\", \"4\"], [\"b\", \"3\"]])],\n    [\"2\", new Map([[\"a\", \"4\"], [\"b\", \"1\"]])],\n    [\"1\", new Map([[\"a\", \"1\"], [\"b\", \"1\"]])],\n  ])\n}\n\nconst Optional = () => {\n  const classes = useStyles();\n\n  const [checked, setChecked] = useState(true);\n\n  // Automata 1\n  const [specialSequences, setSpecialSequences] = useState([]);\n  const [status, setStatus] = useState({ valid: false, reason: \"\" });\n  const [type, setType] = useState(defaults?.type ?? Type.DFA);\n  const [allStates, setAllStates] = useState(defaults?.states.all ?? []);\n  const [initialState, setInitialState] = useState(defaults?.states.initial ?? \"\");\n  const [finalStates, setFinalStates] = useState(defaults?.states.final ?? []);\n  const [alphabet, setAlphabet] = useState(defaults?.alphabet ?? []);\n  const [transitions, setTransitions] = useState(defaults?.transitions ?? new Map());\n  // Automata 2\n  const [secondSpecialSequences, setSecondSpecialSequences] = useState([]);\n  const [secondStatus, setSecondStatus] = useState({ valid: false, reason: \"\" });\n  const [secondType, setSecondType] = useState(secondDefaults?.type ?? Type.DFA);\n  const [secondAllStates, setSecondAllStates] = useState(secondDefaults?.states.all ?? []);\n  const [secondInitialState, setSecondInitialState] = useState(secondDefaults?.states.initial ?? \"\");\n  const [secondFinalStates, setSecondFinalStates] = useState(secondDefaults?.states.final ?? []);\n  const [secondAlphabet, setSecondAlphabet] = useState(secondDefaults?.alphabet ?? []);\n  const [secondTransitions, setSecondTransitions] = useState(secondDefaults?.transitions ?? new Map());\n\n  const [toggleState, setToggleState] = useState(1);\n\n  // Construye el autómata, si están las condiciones necesarias (determinadas\n  // por el constructor del autómata). Si no, retorna `undefined`.\n  // Automata 1 :\n  const automaton = useMemo(() => {\n    try {\n      const args = {\n        states: { all: allStates, initial: initialState, final: finalStates },\n        alphabet,\n        transitions\n      };\n\n      const automaton = type === Type.NFA ? new NFA(args) : new DFA(args);\n      setStatus({ valid: true });\n      return automaton;\n    } catch (error) {\n      setStatus({ valid: false, reason: error.msg });\n      return null;\n    }\n  }, [allStates, initialState, finalStates, alphabet, transitions]);\n\n  // Automata 2 :\n  const secondAutomaton = useMemo(() => {\n    try {\n      const args = {\n        states: { all: secondAllStates, initial: secondInitialState, final: secondFinalStates },\n        alphabet: secondAlphabet,\n        transitions: secondTransitions\n      };\n\n      const secondAutomaton = secondType === Type.NFA ? new NFA(args) : new DFA(args);\n      setSecondStatus({ valid: true });\n      return secondAutomaton;\n    } catch (error) {\n      setSecondStatus({ valid: false, reason: error.msg });\n      return null;\n    }\n  }, [secondAllStates, secondInitialState, secondFinalStates, secondAlphabet, secondTransitions]);\n\n  const toggleTab = (index) => {\n    setToggleState(index);\n  };\n\n  function handleSpecialSequencesChange(value) {\n    setSpecialSequences(\n      uniq(\n        value\n          .replace(/\\s+/g, \"\")\n          .split(\",\")\n          .filter((special) => special.length > 0)\n      )\n    );\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en las secuencias especiales del autómata 1')\n  }\n\n  function handleSecondSpecialSequencesChange(value) {\n    setSecondSpecialSequences(\n      uniq(\n        value\n          .replace(/\\s+/g, \"\")\n          .split(\",\")\n          .filter((special) => special.length > 0)\n      )\n    );\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en las secuencias especiales del autómata 2')\n  }\n\n\n  /////////////////////////////////////////////////////////////////\n  //! HANDLE ALL STATES CHANGES\n  function handleAllStatesChange(value) {\n    setAllStates(\n      uniq(\n        value\n          .replace(/\\s+/g, \"\")\n          .split(\",\")\n          .filter((symbol) => symbol.length > 0)\n      )\n    );\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en los estados del autómata 1')\n\n  };\n  function handleAllSecondStatesChange(value) {\n    setSecondAllStates(\n      uniq(\n        value\n          .replace(/\\s+/g, \"\")\n          .split(\",\")\n          .filter((symbol) => symbol.length > 0)\n       )\n    );\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en los estados del autómata 2')\n  };\n  /////////////////////////////////////////////////////////////////\n  //! HANDLE INITIAL STATE CHANGES\n  function handleInitialStateChange(event) {\n    setInitialState(event.target.value);\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en el estado inicial del autómata 1')\n  };\n  function handleSecondInitialStateChange(event) {\n    setSecondInitialState(event.target.value);\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en el estado inicial del autómata 2')\n  };\n  /////////////////////////////////////////////////////////////////\n  //! HANDLE FINAL STATE CHANGES\n  function handleFinalStatesChange(event) {\n    setFinalStates(event.target.value);\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en los estados finales del autómata 1')\n  };\n  function handleSecondFinalStatesChange(event) {\n    setSecondFinalStates(event.target.value);\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en los estados finales del autómata 2')\n  };\n  /////////////////////////////////////////////////////////////////\n  //! HANDLE ALPHABET CHANGES\n  function handleAlphabetChange(value) {\n    setAlphabet(uniq(value.split(\"\")));\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en el alfabeto del autómata 1')\n  }\n  function handleSecondAlphabetChange(value) {\n    setSecondAlphabet(uniq(value.split(\"\")));\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en el alfabeto del autómata 2')\n  }\n  /////////////////////////////////////////////////////////////////\n  //! HANDLE TRANSITION CHANGES\n  function handleTransitionsChange(state, reading, event) {\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en las transiciones del autómata 1')\n    let copy = cloneDeep(transitions);\n\n    const value = flatten([event.target.value]).filter((e) => e != null);\n    const output = value.length === 1 ? first(value) : value;\n\n    if (value.length > 0) {\n      copy.set(\n        state,\n        new Map([...(copy.get(state) ?? []), [reading, output]])\n      );\n    } else {\n      copy.get(state)?.delete(reading);\n\n      if (copy.has(state) && copy.get(state).size === 0) {\n        copy.delete(state);\n      }\n    }\n\n    setTransitions(copy);\n  }\n\n  function handleTransitionsChangeSecond(state, reading, event) {\n    logs.info(`[${today.getFullYear()}/${today.getDay()}/${today.getDate()} - ${today.getHours()}:${today.getMinutes()}]`, 'Cambio en las transiciones del autómata 2')\n    let copy = cloneDeep(secondTransitions);\n\n    const value = flatten([event.target.value]).filter((e) => e != null);\n    const output = value.length === 1 ? first(value) : value;\n\n    if (value.length > 0) {\n      copy.set(\n        state,\n        new Map([...(copy.get(state) ?? []), [reading, output]])\n      );\n    } else {\n      copy.get(state)?.delete(reading);\n\n      if (copy.has(state) && copy.get(state).size === 0) {\n        copy.delete(state);\n      }\n    }\n\n    setSecondTransitions(copy);\n  }\n\n  useEffect(() => {\n    // Si el estado inicial ya no está contenido en el conjunto de estados,\n    // asignarle un estado existente.\n    if (!allStates.includes(initialState)) {\n      setInitialState(first(allStates));\n    }\n\n    const removedFinal = finalStates.filter((state) => !allStates.includes(state));\n    if (removedFinal.length > 0) {\n      setFinalStates(difference(finalStates, removedFinal));\n    }\n  }, [allStates]);\n\n  useEffect(() => {\n    if (!secondAllStates.includes(secondInitialState)) {\n      setSecondInitialState(first(secondAllStates));\n    }\n\n    const removedFinal = secondFinalStates.filter((state) => !secondAllStates.includes(state));\n    if (removedFinal.length > 0) {\n      setSecondFinalStates(difference(secondFinalStates, removedFinal));\n    }\n  }, [secondAllStates]);\n\n  useEffect(() => {\n    let copy = cloneDeep(transitions);\n\n    for (const [input, outputs] of copy) {\n      if (!allStates.includes(input)) {\n        copy.delete(input);\n        continue;\n      }\n\n      for (const [reading, output] of outputs) {\n        // Elimina la salida que contenga un símbolo que no esté en el alfabeto.\n        if (![...alphabet, ...(type === Type.NFA ? [Epsilon.symbol] : [])].includes(reading) || !allStates.includes(output)) {\n          copy.get(input).delete(reading);\n        }\n      }\n\n      // Elimina las transiciones vacías.\n      if (copy.get(input).size === 0) {\n        copy.delete(input);\n      }\n    }\n\n    setTransitions(copy);\n  }, [allStates, alphabet]);\n\n  useEffect(() => {\n    let copy = cloneDeep(secondTransitions);\n\n    for (const [input, outputs] of copy) {\n      if (!secondAllStates.includes(input)) {\n        copy.delete(input);\n        continue;\n      }\n\n      for (const [reading, output] of outputs) {\n        // Elimina la salida que contenga un símbolo que no esté en el alfabeto.\n        if (![...secondAlphabet, ...(secondType === Type.NFA ? [Epsilon.symbol] : [])].includes(reading) || !secondAllStates.includes(output)) {\n          copy.get(input).delete(reading);\n        }\n      }\n\n      // Elimina las transiciones vacías.\n      if (copy.get(input).size === 0) {\n        copy.delete(input);\n      }\n    }\n\n    setSecondTransitions(copy);\n  }, [secondAllStates, secondAlphabet]);\n\n\n\n  function handleChange() {\n    setChecked((prev) => !prev);\n  };\n  // Cambios en el tipo del autómata\n  // Automata 1 :\n  function handleTypeChange(type) {\n    // Forzar la actualización de los props del componente.\n    function forceUpdate() {\n      setAllStates([...allStates]);\n      setInitialState(initialState);\n      setFinalStates([...finalStates]);\n      setAlphabet([...alphabet]);\n      setTransitions(cloneDeep(transitions));\n    }\n\n    switch (type) {\n      // Conversión AFND a AFD.\n      case Type.DFA: {\n        // Si el NFA es válido, realizar la conversión utilizando `DFA.from`.\n        if (automaton != null) {\n          const dfa = DFA.from({ nfa: automaton }).minimal();\n          setAllStates(dfa.states.all);\n          setInitialState(dfa.states.initial);\n          setFinalStates(dfa.states.final);\n          setAlphabet(dfa.alphabet);\n          setTransitions(dfa.transitions);\n          setSpecialSequences([]);\n        }\n\n        // Si no, forzar la actualización de los datos. A diferencia de la\n        // conversión AFD => AFND, un AFND inválido es un AFD inválido.\n        else {\n          forceUpdate();\n        }\n\n        break;\n      }\n\n      // Conversión AFD a AFND.\n      // Forzar la actualización de todos los campos, para a su vez, forzar la\n      // creación de un nuevo NFA (un AFD no válido transformado a AFND puede\n      // que sea válido).\n      case Type.NFA:\n        forceUpdate();\n        break;\n    }\n\n    setType(type);\n  }\n\n  // Automata 2 :\n  function handleSecondTypeChange(secondType) {\n    // Forzar la actualización de los props del componente.\n    function forceUpdate() {\n      setSecondAllStates([...secondAllStates]);\n      setSecondInitialState(secondInitialState);\n      setSecondFinalStates([...secondFinalStates]);\n      setSecondAlphabet([...secondAlphabet]);\n      setSecondTransitions(cloneDeep(secondTransitions));\n    }\n\n    switch (secondType) {\n      // Conversión AFND a AFD.\n      case Type.DFA: {\n        // Si el NFA es válido, realizar la conversión utilizando `DFA.from`.\n        if (secondAutomaton != null) {\n          const dfa = DFA.from({ nfa: secondAutomaton }).minimal();\n          setSecondAllStates(dfa.states.all);\n          setSecondInitialState(dfa.states.initial);\n          setSecondFinalStates(dfa.states.final);\n          setSecondAlphabet(dfa.alphabet);\n          setSecondTransitions(dfa.transitions);\n          setSecondSpecialSequences([]);\n        }\n\n        // Si no, forzar la actualización de los datos. A diferencia de la\n        // conversión AFD => AFND, un AFND inválido es un AFD inválido.\n        else {\n          forceUpdate();\n        }\n\n        break;\n      }\n\n      // Conversión AFD a AFND.\n      // Forzar la actualización de todos los campos, para a su vez, forzar la\n      // creación de un nuevo NFA (un AFD no válido transformado a AFND puede\n      // que sea válido).\n      case Type.NFA:\n        forceUpdate();\n        break;\n    }\n\n    setSecondType(secondType);\n  }\n\n  const setValues = () => {\n    setAllStates([]);\n    setInitialState('');\n    setFinalStates([]);\n    setAlphabet([]);\n    setTransitions(new Map());\n    setSpecialSequences([]);\n    setStatus({ valid: false, msg: \"\" });\n\n    setSecondAllStates([]);\n    setSecondInitialState('');\n    setSecondFinalStates([]);\n    setSecondAlphabet([]);\n    setSecondTransitions(new Map());\n    setSecondSpecialSequences([]);\n    setSecondStatus({ valid: false, msg: \"\" });\n  }\n\n  function renderAutomaton() {\n    let minimal;\n\n    if (type === Type.NFA && automaton != null) {\n      minimal = DFA.from({ nfa: automaton }).minimal();\n    }\n\n    return (\n      <>\n        <Content\n          data={getNodesData(allStates, finalStates, initialState)}\n          linksData={getLinks(automaton?.transitions ?? transitions)}\n          isDirected={true}\n        />\n        {type === Type.NFA && status.valid && (\n          <>\n            <h3>AFD equivalente, simplificado:</h3>\n            <Content\n              data={getNodesData(minimal?.states.all, minimal?.states.final, minimal?.states.initial)}\n              linksData={getLinks(minimal?.transitions)}\n              isDirected={true}\n            />\n          </>\n        )}\n      </>\n    );\n  }\n\n  function renderSecondAutomaton() {\n    let minimal;\n\n    if (secondType === Type.NFA && secondAutomaton != null) {\n      minimal = DFA.from({ nfa: secondAutomaton }).minimal();\n    }\n\n    return (\n      <>\n        <Content\n          data={getNodesData(secondAllStates, secondFinalStates, secondInitialState)}\n          linksData={getLinks(secondAutomaton?.transitions ?? secondTransitions)}\n          isDirected={true}\n        />\n        {secondType === Type.NFA && secondStatus.valid && (\n          <>\n            <h3>AFD equivalente, simplificado:</h3>\n            <Content\n              data={getNodesData(minimal.states.all, minimal.states.final, minimal.states.initial)}\n              linksData={getLinks(minimal.transitions)}\n              isDirected={true}\n            />\n          </>\n        )}\n      </>\n    );\n  }\n\n  function renderData() {\n    return (\n      <>\n        Datos autómata 1:\n        <div> - Tipo: {type}</div>\n        <div> - Estados: {arrayToString(allStates)}</div>\n        <div> - Estado inicial: {initialState}</div>\n        <div> - Estados finales: {arrayToString(finalStates)}</div>\n        <div> - Alfabeto: {arrayToString(alphabet)}</div>\n        <div> - Transiciones: {mapToString(transitions)}</div>\n        <div> - Secuencias especiales: {arrayToString(specialSequences)}</div>\n        <div> - Estado: {status.valid ? \"Autómata válido\" : \"Autómata inválido: \" + status.reason}</div>\n        Datos autómata 2:\n        <div> - Tipo: {secondType}</div>\n        <div> - Estados: {arrayToString(secondAllStates)}</div>\n        <div> - Estado inicial: {secondInitialState}</div>\n        <div> - Estados finales: {arrayToString(secondFinalStates)}</div>\n        <div> - Alfabeto: {arrayToString(secondAlphabet)}</div>\n        <div> - Transiciones: {mapToString(secondTransitions)}</div>\n        <div> - Secuencias especiales: {arrayToString(specialSequences)}</div>\n        <div> - Estado: {secondStatus.valid ? \"Autómata válido\" : \"Autómata inválido: \" + secondStatus.reason}</div>\n      </>\n    );\n  }\n\n  if (type === 'dfa') {\n    console.log(automaton + 'es DFA');\n  } else console.log(automaton + ' es NFA')\n\n  if (secondType === 'dfa') {\n    console.log(secondAutomaton + ' es DFA')\n  } else console.log(secondAutomaton + ' es NFA')\n\n  return (\n    <>\n      <div className='container'>\n        <div className='automata-header-container'>\n          <button\n            className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n            onClick={() => toggleTab(1)}\n          > Automata 1\n          </button>\n          <button\n            className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n            onClick={() => toggleTab(2)}\n          > Automata 2\n          </button>\n        </div>\n        <div>\n          {/* {renderData()} */}\n        </div>\n        <div>\n          <FormControlLabel\n            className={classes.container}\n            control={<Switch checked={checked} onChange={handleChange} />}\n            label={checked === true ? 'Ocultar' : 'Mostrar'}\n          />\n          <Collapse in={checked} >\n            <div className='collapse-container'>\n              <div className={toggleState === 1 ? \"content-tabs  active-content-tabs\" : \"content-tabs\"}>\n                <form className={classes.root} noValidate autoComplete=\"off\" aria-readonly={true}>\n                  <h2 className='title-sectiion'>Automata 1</h2>\n                  <div className={classes.container}>\n                    <div>\n                      <div style={{ marginLeft: 10 }}>\n                        <RadioButtonsGroup\n                          options={types}\n                          value={type}\n                          onChange={handleTypeChange}\n                        >\n                          Tipo de autómata\n                        </RadioButtonsGroup>\n                      </div>\n                      <div>\n                        <InputDialog\n                          values={allStates}\n                          label=\"Estados\"\n                          join=\", \"\n                          onChange={handleAllStatesChange}\n                        >\n                          <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                            Ingrese los estados del autómata, separados por comas.\n                          </p>\n                          <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                            Espacios y estados duplicados son ignorados.\n                          </p>\n                        </InputDialog>\n                      </div>\n                      <div>\n                        <SimpleSelect\n                          options={allStates}\n                          value={initialState}\n                          onChange={handleInitialStateChange}\n                          nullable={false}\n                          helperText=\"Seleccione el estado inicial.\"\n                          minWidth={200}\n                        >\n                          Estado inicial\n                        </SimpleSelect>\n                      </div>\n                      <div>\n                        <MultiSelect\n                          options={allStates}\n                          value={finalStates}\n                          onChange={handleFinalStatesChange}\n                          helperText=\"Seleccione los estados finales.\"\n                          minWidth={200}\n                        >\n                          Estados finales\n                        </MultiSelect>\n                      </div>\n                      <div>\n                        <InputDialog\n                          values={alphabet}\n                          label=\"Alfabeto de entrada\"\n                          join=\"\"\n                          onChange={handleAlphabetChange}\n                        >\n                          <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                            Ingrese los símbolos del alfabeto de entrada,\n                          </p>\n                          <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                            Espacios y símbolos duplicados son ignorados.\n                          </p>\n                        </InputDialog>\n                      </div>\n                      <div>\n                        {type === Type.NFA &&\n                        \t(\n                            <InputDialog\n                              values={specialSequences}\n                              label=\"Secuencias especiales\"\n                              join=\", \"\n                              onChange={handleSpecialSequencesChange}\n                              isError={\n                                (value) =>\n                                  value\n                                    .split(\"\")\n                                    .filter((e) => ![\" \", \",\"].includes(e))\n                                    .some((e) => !alphabet.includes(e))\n                              }\n                              helpers={{ error: \"Uno de los carácteres no pertenece al alfabeto.\" }}\n                            >\n                              <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                                Ingrese las secuencias de lectura especiales del autómata,\n                              </p>\n                              <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                                separadas por comas. Espacios y secuencias duplicadas\n                              </p>\n                              <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                                son ignoradas.\n                              </p>\n                            </InputDialog>\n                          )\n                        }\n                      </div>\n                      <div>\n                        <TextField\n                          id=\"status\"\n                          label=\"Estado\"\n                          multiline\n                          error={!status.valid}\n                          value={status.reason?.length > 0 ? `Inválido: ${status.reason}` : \"Válido.\"}\n                          InputProps={{\n                            readOnly: true,\n                          }}\n                          variant=\"outlined\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      {type === Type.NFA ? (\n                        <Transitions\n                          type={type}\n                          transitions={transitions}\n                          alphabet={[...alphabet, Epsilon.symbol, ...specialSequences]}\n                          states={allStates}\n                          onChange={handleTransitionsChange}\n                        />\n                      ) : (\n                        <Transitions\n                          type={type}\n                          transitions={transitions}\n                          alphabet={alphabet}\n                          states={allStates}\n                          onChange={handleTransitionsChange}\n                        />\n                      )}\n                    </div>\n                  </div>\n                </form>\n              </div>\n              <div className={toggleState === 2 ? \"content-tabs  active-content-tabs\" : \"content-tabs\"}>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                  <h2 className='title-sectiion'>Automata 2</h2>\n                  <div className={classes.container}>\n                    <div>\n                      <div style={{ marginLeft: 10 }}>\n                      <RadioButtonsGroup\n                          options={types}\n                          value={secondType}\n                          onChange={handleSecondTypeChange}\n                        >\n                          Tipo de autómata\n                        </RadioButtonsGroup>\n                      </div>\n                      <div>\n                        <InputDialog\n                          values={secondAllStates}\n                          label=\"Estados\"\n                          join=\", \"\n                          onChange={handleAllSecondStatesChange}\n                        >\n                          <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                            Ingrese los estados del autómata, separados por comas.\n                          </p>\n                          <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                            Espacios y estados duplicados son ignorados.\n                          </p>\n                        </InputDialog>\n                      </div>\n                      <div>\n                        <SimpleSelect\n                          options={secondAllStates}\n                          value={secondInitialState}\n                          onChange={handleSecondInitialStateChange}\n                          helperText=\"Seleccione el estado inicial.\"\n                          minWidth={200}\n                        >\n                          Estado inicial\n                        </SimpleSelect>\n                      </div>\n                      <div>\n                        <MultiSelect\n                          options={secondAllStates}\n                          value={secondFinalStates}\n                          onChange={handleSecondFinalStatesChange}\n                          helperText=\"Seleccione los estados finales.\"\n                          minWidth={200}\n                        >\n                          Estados finales\n                        </MultiSelect>\n                      </div>\n                      <div>\n                        <InputDialog\n                          values={secondAlphabet}\n                          label=\"Alfabeto de entrada\"\n                          join=\"\"\n                          onChange={handleSecondAlphabetChange}\n                        >\n                          <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                            Ingrese los símbolos del alfabeto de entrada.\n                          </p>\n                          <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                            Espacios y símbolos duplicados son ignorados.\n                          </p>\n                        </InputDialog>\n                      </div>\n                      <div>\n                        {secondType === Type.NFA &&\n                        \t(\n                            <InputDialog\n                              values={secondSpecialSequences}\n                              label=\"Secuencias especiales\"\n                              join=\", \"\n                              onChange={handleSecondSpecialSequencesChange}\n                              isError={\n                                (value) =>\n                                  value\n                                    .split(\"\")\n                                    .filter((e) => ![\" \", \",\"].includes(e))\n                                    .some((e) => !alphabet.includes(e))\n                              }\n                              helpers={{ error: \"Uno de los carácteres no pertenece al alfabeto.\" }}\n                            >\n                              <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                                Ingrese las secuencias de lectura especiales del autómata,\n                              </p>\n                              <p style={{ marginTop: 0, fontSize: \"0.9rem\" }}>\n                                separadas por comas. Espacios y secuencias duplicadas\n                              </p>\n                              <p style={{ paddingBottom: 10, fontSize: \"0.9rem\" }}>\n                                son ignoradas.\n                              </p>\n                            </InputDialog>\n                          )\n                        }\n                      </div>\n                      <div>\n                        <TextField\n                          id=\"status\"\n                          label=\"Estado\"\n                          multiline\n                          error={!secondStatus.valid}\n                          value={secondStatus.reason?.length > 0 ? `Inválido: ${secondStatus.reason}` : \"Válido.\"}\n                          InputProps={{\n                            readOnly: true,\n                          }}\n                          variant=\"outlined\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      {secondType === Type.NFA ? (\n                        <Transitions\n                          type={secondType}\n                          transitions={secondTransitions}\n                          alphabet={[...secondAlphabet, Epsilon.symbol, ...secondSpecialSequences]}\n                          states={secondAllStates}\n                          onChange={handleTransitionsChangeSecond}\n                        />\n                      ) : (\n                        <Transitions\n                          type={secondType}\n                          transitions={secondTransitions}\n                          alphabet={secondAlphabet}\n                          states={secondAllStates}\n                          onChange={handleTransitionsChangeSecond}\n                        />\n                      )}\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div className='collapse-container margin'>\n              <button onClick={setValues} className='button-logs'>\n                Limpiar campos\n              </button>\n            </div>\n          </Collapse>\n          <div style={{ width: \"100%\", textAlign: \"center\" }}>\n            <div style={{ display: \"inline-block\", fontFamily: \"Roboto\" }}>\n              Los estados con color naranjo son finales y los blancos no finales.\n              El estado inicial se denota por el nombre del estado entre corchetes (por ej, {\"{q0}\"}).\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='collapse-container'>\n        <div className='initial-automaton-text-center'>\n          <h2>Automata 1 inicial</h2>\n          {renderAutomaton()}\n        </div>\n        <div className='initial-automaton-text-center'>\n          <h2>Automata 2 inicial</h2>\n          {renderSecondAutomaton()}\n        </div>\n        <div>\n\n        </div>\n      </div>\n      <Tabs\n        lhs={automaton}\n        rhs={secondAutomaton}\n        lhsType={type}\n        rhsType={secondType}\n      />\n      <div className='collapse-container'>\n        <button className='button-logs' onClick={() => logs.downloadLog()}>\n          Descargar logs\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default Optional;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/index.css\";\nimport Header from \"./components/Header.js\";\nimport Optional from \"./components/Optional\";\n\nexport function AutomataForm() {\n  return (\n    <>\n      <Header />\n      <Optional />\n    </>\n  );\n}\n\nReactDOM.render(<AutomataForm />, document.getElementById(\"root\"));\n"],"sourceRoot":""}